using System.Collections.Generic;
using System.Linq;
using CAESAR.Chess.Core;
using CAESAR.Chess.Helpers;
using CAESAR.Chess.Pieces;
using CAESAR.Chess.PlayArea;

namespace CAESAR.Chess.Moves.Generation
{
    /// <summary>
    ///     Generates <seealso cref="IMove" />s for a particular <seealso cref="ISquare" />, based on the move
    ///     generation rules of the <seealso cref="Knight" />.
    /// </summary>
    public class KnightMovesGenerator : MovesGenerator
    {
        /// <summary>
        ///     The special moves generated by this <seealso cref="MovesGenerator" />. For the
        ///     <seealso cref="KnightMovesGenerator" />, there are no special moves.
        /// </summary>
        protected override IEnumerable<IMove> SpecialMoves => Enumerable.Empty<IMove>();

        /// <summary>
        ///     The <seealso cref="ISquare" />s to which the <seealso cref="Knight" /> can move, from
        ///     <seealso cref="IMovesGenerator.Square" />.
        /// </summary>
        protected override IEnumerable<ISquare> MovementSquares => GetKnightSquares();

        /// <summary>
        ///     The <seealso cref="ISquare" />s which the <seealso cref="Knight" /> can capture, from
        ///     <seealso cref="IMovesGenerator.Square" />.
        /// </summary>
        protected override IEnumerable<ISquare> CaptureSquares => MovementSquares;

        /// <summary>
        ///     Gets the <seealso cref="ISquare" />s that a <seealso cref="Knight" /> in the
        ///     <seealso cref="IMovesGenerator.Square" /> can move to.
        /// </summary>
        /// <returns>
        ///     The <seealso cref="ISquare" />s that a <seealso cref="Knight" /> in the <seealso cref="IMovesGenerator.Square" />
        ///     can move to.
        /// </returns>
        private IEnumerable<ISquare> GetKnightSquares()
        {
            var knightSquare =
                Square.GetAdjacentSquareInDirection(Direction.UpRight).GetAdjacentSquareInDirection(Direction.Up);
            if (knightSquare != null)
                yield return knightSquare;

            knightSquare =
                Square.GetAdjacentSquareInDirection(Direction.UpRight).GetAdjacentSquareInDirection(Direction.Right);
            if (knightSquare != null)
                yield return knightSquare;

            knightSquare =
                Square.GetAdjacentSquareInDirection(Direction.DownRight).GetAdjacentSquareInDirection(Direction.Right);
            if (knightSquare != null)
                yield return knightSquare;

            knightSquare =
                Square.GetAdjacentSquareInDirection(Direction.DownRight).GetAdjacentSquareInDirection(Direction.Down);
            if (knightSquare != null)
                yield return knightSquare;

            knightSquare =
                Square.GetAdjacentSquareInDirection(Direction.DownLeft).GetAdjacentSquareInDirection(Direction.Down);
            if (knightSquare != null)
                yield return knightSquare;

            knightSquare =
                Square.GetAdjacentSquareInDirection(Direction.DownLeft).GetAdjacentSquareInDirection(Direction.Left);
            if (knightSquare != null)
                yield return knightSquare;

            knightSquare =
                Square.GetAdjacentSquareInDirection(Direction.UpLeft).GetAdjacentSquareInDirection(Direction.Left);
            if (knightSquare != null)
                yield return knightSquare;

            knightSquare =
                Square.GetAdjacentSquareInDirection(Direction.UpLeft).GetAdjacentSquareInDirection(Direction.Up);
            if (knightSquare != null)
                yield return knightSquare;
        }
    }
}