using System.Collections.Generic;
using System.Linq;
using CAESAR.Chess.Core;
using CAESAR.Chess.Pieces;
using CAESAR.Chess.PlayArea;

namespace CAESAR.Chess.Moves.Generation
{
    /// <summary>
    ///     Generates <seealso cref="IMove" />s for a particular <seealso cref="ISquare" />, based on a particular set of move
    ///     generation rules.
    /// </summary>
    public abstract class MovesGenerator : IMovesGenerator
    {
        /// <summary>
        ///     The <seealso cref="NormalMove" />s generated by this <seealso cref="MovesGenerator" />.
        /// </summary>
        private IEnumerable<NormalMove> NormalMoves => MovementSquares.Distinct()
            .Where(square => square != null && square.Piece == null)
            .Select(square => new NormalMove(Square, square.Name));

        /// <summary>
        ///     The <seealso cref="CapturingMove" />s generated by this <seealso cref="MovesGenerator" />.
        /// </summary>
        private IEnumerable<CapturingMove> Captures => CaptureSquares.Distinct()
            .Where(square => square?.Piece != null && square.Piece.Side != Piece.Side)
            .Select(square => new CapturingMove(Square, square.Name));

        /// <summary>
        ///     The special moves generated by this <seealso cref="MovesGenerator" />.
        /// </summary>
        protected abstract IEnumerable<IMove> SpecialMoves { get; }

        /// <summary>
        ///     The <seealso cref="ISquare" />s to which the <seealso cref="Piece" /> can move.
        /// </summary>
        protected abstract IEnumerable<ISquare> MovementSquares { get; }

        /// <summary>
        ///     The <seealso cref="ISquare" />s which the <seealso cref="Piece" /> can capture.
        /// </summary>
        protected abstract IEnumerable<ISquare> CaptureSquares { get; }

        /// <summary>
        ///     The <seealso cref="IPiece" /> in the <seealso cref="Square" />.
        /// </summary>
        protected IPiece Piece => Square?.Piece;

        /// <summary>
        ///     The <seealso cref="Core.Side" /> of the <seealso cref="Piece" />.
        /// </summary>
        protected Side Side => Piece.Side;

        /// <summary>
        ///     The <seealso cref="IMove" />s generated by this <seealso cref="IMovesGenerator" />. It is made up of
        ///     <seealso cref="NormalMove" />s, <seealso cref="CapturingMove" />s, and various <seealso cref="SpecialMoves" />.
        /// </summary>
        public IEnumerable<IMove> Moves
            => Piece != null ? NormalMoves.Concat(Captures).Concat(SpecialMoves) : Enumerable.Empty<IMove>();


        /// <summary>
        ///     The <seealso cref="ISquare" /> of the <seealso cref="IMovesGenerator" />.
        /// </summary>
        public ISquare Square { get; set; }
    }
}